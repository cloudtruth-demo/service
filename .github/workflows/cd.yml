name: CD

on: [push]

env:
  CT_API_KEY: ${{ secrets.CT_API_KEY }}

jobs:

  deploy:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup operation environment
        run: |
          branch=${GITHUB_REF##*/}
          if [[ "$branch" == "master" ]]; then
            env="production"
          else
            env="development"
          fi
          echo "ENV=${env}" >> $GITHUB_ENV

      - name: Set up Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Install cloudtruth cli
        run: |
          curl -Lsf https://github.com/cloudtruth/cloudtruth-cli/releases/download/0.1.0/cloudtruth_0.1.0_amd64.deb  -o /tmp/cloudtruth.deb
          sudo dpkg -i /tmp/cloudtruth.deb

      - name: Install Atmos
        run: gem install --no-document simplygenius-atmos

      - name: Setup Atmos
        run: |
          mkdir -p config
          cloudtruth -e ${ENV} template get atmos_yml > config/atmos.yml

      - name: Build the Docker image
        run: |
          cloudtruth -e ${ENV} template get deploy.service_dotenv  > .env
          docker build . --file Dockerfile --tag demo1

      - name: Deploy to ECS
        run: |
          source <(cloudtruth -e ${ENV} template get deploy.aws_credentials_env)
          atmos -e ${ENV} container deploy -c ctdemo-${ENV}-services -i demo1 ctdemo-${ENV}-demo1

      - name: Install kubectl
        run: |
          curl -Lsf https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl -o /tmp/kubectl
          chmod +x /tmp/kubectl

      - name: Deploy to EKS
        run: |
          source <(cloudtruth -e ${ENV} template get deploy.aws_credentials_env)
          kubecfg=$(cloudtruth -e ${ENV} template get deploy.services.kubecfg)

          # Update configmap
          cloudtruth -e ${ENV} template get deploy.service_demo2_configmap | \
            /tmp/kubectl --kubeconfig=<(echo "$kubecfg") apply -f -

          # Apply deployment yml
          cloudtruth -e ${ENV} template get deploy.service_demo2_kube_yml | \
            /tmp/kubectl --kubeconfig=<(echo "$kubecfg") apply -f -
